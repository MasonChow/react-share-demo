{"version":3,"file":"static/js/582.d1c3d3b4.chunk.js","mappings":"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","sources":["pages/Snake/Demo1/Block.tsx","pages/Snake/Demo1/index.tsx","pages/Snake/Demo2/Block.tsx","pages/Snake/Demo2/index.tsx","pages/Snake/Demo3/Block.tsx","pages/Snake/Demo3/index.tsx","lib/snake.ts","pages/Snake/index.tsx"],"sourcesContent":["function Block({ isActive }: { isActive: boolean }) {\n  return <div className={['block', isActive && 'active'].join(' ')}></div>;\n}\n\nexport default Block;\n","import { useEffect, useState } from 'react';\nimport Block from './Block';\nimport { snake } from '../index';\n// import usePerformance from '../../../hooks/usePerformance';\n\nfunction Demo() {\n  const [snakeBody, setSnakeBody] = useState<string[]>([]);\n  const [feed, setFeed] = useState('');\n\n  useEffect(() => {\n    snake.start();\n    const event = snake.on((type, data) => {\n      if (type === 'move') {\n        setSnakeBody(data.body);\n      }\n      if (type === 'new_feed') {\n        setFeed(data.feed);\n      }\n    });\n\n    return () => {\n      event.off();\n    };\n  }, []);\n\n  return (\n    <div style={snake.backgroundStyle}>\n      {snake.blocks.map((block) => (\n        <Block\n          isActive={snakeBody.includes(block.id) || feed === block.id}\n          key={block.id}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default Demo;\n","import { useContext, useMemo } from 'react';\nimport { SnakeContext } from './index';\n\nfunction Block({ id }: { id: string }) {\n  const context = useContext(SnakeContext);\n  const isActive = context.body.includes(id) || context.feed === id;\n\n  return useMemo(() => {\n    return <div className={['block', isActive && 'active'].join(' ')}></div>;\n  }, [isActive]);\n}\n\nexport default Block;\n","import React, { useEffect, useMemo, useState } from 'react';\nimport Block from './Block';\nimport { snake } from '../index';\n\nexport const SnakeContext = React.createContext<{\n  body: string[];\n  feed: string;\n}>({ body: [], feed: '' });\n\nfunction Demo() {\n  const [snakeBody, setSnakeBody] = useState<string[]>([]);\n  const [feed, setFeed] = useState('');\n\n  useEffect(() => {\n    snake.start();\n    const event = snake.on((type, data) => {\n      if (type === 'move') {\n        setSnakeBody(data.body);\n      }\n\n      if (type === 'new_feed') {\n        setFeed(data.feed);\n      }\n    });\n\n    return () => {\n      event.off();\n    };\n  }, []);\n\n  const background = useMemo(() => {\n    return (\n      <div style={snake.backgroundStyle}>\n        {snake.blocks.map((block) => (\n          <Block key={block.id} id={block.id} />\n        ))}\n      </div>\n    );\n  }, []);\n\n  return (\n    <SnakeContext.Provider value={{ body: snakeBody, feed }}>\n      {background}\n    </SnakeContext.Provider>\n  );\n}\n\nexport default Demo;\n","import React, { useEffect, useState } from 'react';\nimport { SubscribeChangeFn } from './index';\n\nfunction Block({\n  id,\n  subscribeChange,\n}: {\n  id: string;\n  subscribeChange: (id: string, fn: SubscribeChangeFn) => void;\n}) {\n  const [isActive, setIsActive] = useState(false);\n\n  useEffect(() => {\n    if (subscribeChange && id) {\n      subscribeChange(id, (active) => {\n        setIsActive(active);\n      });\n    }\n  }, [id, subscribeChange]);\n\n  return (\n    <div\n      className={['block', isActive && 'active'].filter(Boolean).join(' ')}\n    ></div>\n  );\n}\nexport default Block;\n","import { useEffect, useRef, useCallback } from 'react';\n\nimport Block from './Block';\nimport { snake } from '../index';\n\nexport type SubscribeChangeFn = (active: boolean) => void;\n\nfunction Demo() {\n  const subscribeRef = useRef<{\n    lastBody: string[];\n    subscribeBlocks: Record<string, SubscribeChangeFn>;\n  }>({\n    lastBody: [],\n    subscribeBlocks: {},\n  });\n\n  const subscribeChange = useCallback((id: string, fn: SubscribeChangeFn) => {\n    subscribeRef.current.subscribeBlocks[id] = fn;\n  }, []);\n\n  useEffect(() => {\n    snake.start();\n    const event = snake.on((type, data) => {\n      if (type === 'move') {\n        const body = data.body;\n        const { subscribeBlocks, lastBody } = subscribeRef.current;\n        const next = body[0];\n        const last = lastBody[lastBody.length - 1];\n        // data有，cacheBody无，则证明有一个要变成true\n        subscribeBlocks[next]?.(true);\n        // data无，cacheBody有，则证明有一个要变成false\n        subscribeBlocks[last]?.(false);\n\n        subscribeRef.current.lastBody = body;\n      }\n    });\n\n    return () => {\n      event.off();\n      subscribeRef.current = {\n        lastBody: [],\n        subscribeBlocks: {},\n      };\n    };\n  }, []);\n\n  return (\n    <div style={snake.backgroundStyle}>\n      {snake.blocks.map((block) => (\n        <Block key={block.id} id={block.id} subscribeChange={subscribeChange} />\n      ))}\n    </div>\n  );\n}\n\nexport default Demo;\n","import random from 'lodash/random';\nimport isEqual from 'lodash/isEqual';\n\n// 移动方向\nexport enum Direction {\n  Up = 1,\n  Down,\n  Left,\n  Right,\n}\n\n// 方块点\nexport type Point = string;\n\n// 身体\nexport type Body = Point[];\n\n// 背景块\nexport type Block = { id: Point };\n\n// 背景块列表\nexport type Blocks = Block[];\n\n// 初始化配置\nexport type initOptions = {\n  // 每格的大小(单位-px)\n  size: number;\n  // 移动速度(单位毫秒)\n  speed: number;\n};\n\n// 订阅事件id\nexport type EventId = ReturnType<typeof buildId>;\n\n// 主动事件类型\nexport type HandleEventTypes = 'move' | 'new_feed' | 'game_over';\n\n// 回调内容\nexport type HandleEventCallbackData = {\n  body: Body;\n  feed: Point;\n};\n\n// 回调函数类型\nexport type EventCallbackFn = (\n  type: HandleEventTypes,\n  data: HandleEventCallbackData\n) => void;\n\n// 订阅类型\nexport type EventSubscribes = Array<{\n  id: EventId;\n  fn: EventCallbackFn;\n}>;\n\nconst keyDirectionMap = {\n  ArrowUp: Direction.Up,\n  ArrowDown: Direction.Down,\n  ArrowLeft: Direction.Left,\n  ArrowRight: Direction.Right,\n};\n\nexport default class Snake {\n  width = 0;\n  height = 0;\n  direction: Direction = Direction.Right;\n  body: Body = [];\n  eventSubscribes: EventSubscribes = [];\n  feed = '';\n  intervalId = 0;\n  size = 20;\n  speed = 1000;\n  blocks: Blocks = [];\n  lineCount = 0;\n  columnCount = 0;\n  backgroundStyle = {};\n\n  // 实例化\n  constructor(\n    width: number,\n    height: number,\n    options: initOptions = { size: 20, speed: 1000 }\n  ) {\n    this.init(width, height, options);\n  }\n\n  // 订阅事件\n  on(fn: EventCallbackFn) {\n    const id = buildId();\n\n    this.eventSubscribes.push({ id, fn });\n\n    return {\n      off: () => {\n        this.unSubscribes(id);\n      },\n    };\n  }\n\n  // 发布事件\n  publish(type: HandleEventTypes) {\n    const cbData = {\n      body: this.body,\n      feed: this.feed,\n    };\n\n    this.eventSubscribes.forEach((item) => {\n      item?.fn?.(type, cbData);\n    });\n  }\n\n  // 取消订阅事件\n  unSubscribes(id: EventId) {\n    this.eventSubscribes = this.eventSubscribes.filter((e) => e.id !== id);\n  }\n\n  // 初始化\n  init(\n    width: number,\n    height: number,\n    options: initOptions = { size: 20, speed: 1000 }\n  ) {\n    const { size, speed } = options;\n\n    this.setBackground(width, height, size);\n    this.createBody(Math.ceil(width / size / 5));\n    this.speed = speed;\n\n    document.addEventListener('keydown', (e) => {\n      if (Object.keys(keyDirectionMap).includes(e.key)) {\n        const key = e.key as keyof typeof keyDirectionMap;\n        this.changeDirection(keyDirectionMap[key]);\n      }\n    });\n\n    return this;\n  }\n\n  // 开始游戏\n  start() {\n    setTimeout(() => {\n      this.run();\n      this.createFeed();\n    }, 0);\n  }\n\n  // 停止游戏\n  stop() {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n    }\n  }\n\n  // 游戏结束\n  gameOver() {\n    this.stop();\n    this.publish('game_over');\n  }\n\n  // 改变移动方向\n  changeDirection(direction: Direction) {\n    if (direction === this.direction) {\n      return;\n    }\n\n    if (\n      isEqual(\n        [direction, this.direction].sort(),\n        [Direction.Up, Direction.Down].sort()\n      )\n    ) {\n      return;\n    }\n\n    if (\n      isEqual(\n        [direction, this.direction].sort(),\n        [Direction.Left, Direction.Right].sort()\n      )\n    ) {\n      return;\n    }\n\n    this.direction = direction;\n  }\n\n  // 开始移动\n  run() {\n    if (!this.intervalId) {\n      this.intervalId = window.setInterval(() => {\n        this.move();\n      }, this.speed);\n    }\n  }\n\n  // 移动\n  move() {\n    const afterBody = [...this.moveBody(this.body)];\n    const newPoint = afterBody[0];\n\n    if (this.body.includes(newPoint)) {\n      this.gameOver();\n    }\n\n    if (newPoint === this.feed) {\n      this.createFeed();\n    } else {\n      afterBody.pop();\n    }\n\n    this.body = afterBody;\n    this.publish('move');\n    return this;\n  }\n\n  moveBody(body: Body) {\n    const afterBody = [...body];\n\n    let [moveX, moveY] = parsePoint(body[0]).map(Number);\n    switch (this.direction) {\n      case Direction.Left:\n        moveX -= 1;\n        break;\n      case Direction.Right:\n        moveX += 1;\n        break;\n      case Direction.Up:\n        moveY -= 1;\n        break;\n      case Direction.Down:\n        moveY += 1;\n        break;\n      default:\n        break;\n    }\n\n    if (moveX < 0) {\n      moveX = this.columnCount - 1;\n    } else if (moveX >= this.columnCount) {\n      moveX = 0;\n    }\n\n    if (moveY < 0) {\n      moveY = this.lineCount - 1;\n    } else if (moveY >= this.lineCount) {\n      moveY = 0;\n    }\n\n    afterBody.unshift(buildPoint(moveX, moveY));\n\n    return afterBody;\n  }\n\n  createBody(bodyLen: number) {\n    // const header = this.randomPoint;\n    // const [startX, startY] = parsePoint(header);\n    let body = [this.randomPoint];\n\n    for (let index = 0; index < bodyLen; index++) {\n      body = this.moveBody(body);\n    }\n\n    this.body = body;\n  }\n\n  // 生成随机点\n  get randomPoint() {\n    const x = random(0, this.lineCount - 1);\n    const y = random(0, this.columnCount - 1);\n    let point = buildPoint(x, y);\n\n    if (this.body.includes(point)) {\n      point = this.randomPoint;\n    }\n\n    return point;\n  }\n\n  // 生成食物\n  createFeed() {\n    this.feed = this.randomPoint;\n    this.publish('new_feed');\n  }\n\n  // 设置背景\n  setBackground(width: number, height: number, size: number) {\n    const { blocks, lineCount, columnCount } = createBlocks(\n      width,\n      height,\n      size\n    );\n    this.width = width;\n    this.height = height;\n    this.size = size;\n    this.blocks = blocks;\n    this.lineCount = lineCount;\n    this.columnCount = columnCount;\n    this.backgroundStyle = {\n      display: 'grid',\n      gridTemplateColumns: `repeat(${columnCount}, ${size}px)`,\n      gridTemplateRows: `repeat(${lineCount}, ${size}px)`,\n      width,\n      height,\n    };\n    return this;\n  }\n}\n\n// 构建唯一id\nfunction buildId() {\n  return [+new Date(), random(0, 1000)].join('_');\n}\n\n// 构建点的坐标\nfunction buildPoint(x: number, y: number) {\n  return [x, y].join('_');\n}\n\n// 解析点的坐标\nfunction parsePoint(point: string) {\n  const [x = 0, y = 0] = point.split('_');\n  return [x, y];\n}\n\n// 生成背景方块列表\nfunction createBlocks(width: number, height: number, size: number) {\n  const columnCount = (width - (width % size)) / size;\n  const lineCount = (height - (height % size)) / size;\n  const blocks: Blocks = [];\n\n  new Array(lineCount).fill(1).forEach((_, y) => {\n    new Array(columnCount).fill(1).forEach((_, x) => {\n      blocks.push({\n        id: [x, y].join('_'),\n      });\n    });\n  });\n\n  return {\n    blocks,\n    lineCount,\n    columnCount,\n  };\n}\n","import React from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport Demo1 from './Demo1';\nimport Demo2 from './Demo2';\nimport Demo3 from './Demo3';\nimport Snake from '../../lib/snake';\n\nimport './style.css';\n\nexport const snake = new Snake(window.innerWidth, window.innerHeight, {\n  size: 100,\n  speed: 1000,\n});\n\nfunction Layout() {\n  return (\n    <div className=\"layout\">\n      <Routes>\n        <Route path=\"demo1\" element={<Demo1 />} />\n        <Route path=\"demo2\" element={<Demo2 />} />\n        <Route path=\"demo3\" element={<Demo3 />} />\n      </Routes>\n      <div className=\"info\">\n        <p>格子总数: {snake.blocks.length}</p>\n        <p>移动频率: {snake.speed}ms/次</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Layout;\n"],"names":["isActive","className","join","snakeBody","setSnakeBody","useState","feed","setFeed","useEffect","snake","start","event","on","type","data","body","off","style","backgroundStyle","blocks","map","block","includes","id","context","useContext","SnakeContext","useMemo","React","background","Provider","value","subscribeChange","setIsActive","active","filter","Boolean","subscribeRef","useRef","lastBody","subscribeBlocks","useCallback","fn","current","next","last","length","Direction","keyDirectionMap","ArrowUp","Up","ArrowDown","Down","ArrowLeft","Left","ArrowRight","Right","buildPoint","x","y","constructor","width","height","options","size","speed","direction","eventSubscribes","intervalId","lineCount","columnCount","this","init","Date","random","push","unSubscribes","publish","cbData","forEach","item","e","setBackground","createBody","Math","ceil","document","addEventListener","Object","keys","key","changeDirection","setTimeout","run","createFeed","stop","clearInterval","gameOver","isEqual","sort","window","setInterval","move","afterBody","moveBody","newPoint","pop","moveX","moveY","point","split","parsePoint","Number","unshift","bodyLen","randomPoint","index","Array","fill","_","createBlocks","display","gridTemplateColumns","gridTemplateRows","innerWidth","innerHeight","path","element","Demo1","Demo2","Demo3"],"sourceRoot":""}